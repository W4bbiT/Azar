{"ast":null,"code":"/*\nCopyright (c) 2022-present NAVER Corp.\nname: @cfcs/core\nlicense: MIT\nauthor: NAVER Crop.\nrepository: https://github.com/naver/cfcs/tree/main/packages/core\nversion: 0.1.0\n*/\nimport Component from '@egjs/component';\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n\n/**\n * @hidden\n */\nfunction keys(obj) {\n  return Object.keys(obj);\n}\n/**\n * @hidden\n */\n\nfunction camelize(str) {\n  return str.replace(/[\\s-_]([a-z])/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n}\n/**\n * @hidden\n */\n\nfunction isString(val) {\n  return typeof val === \"string\";\n}\n/**\n * @hidden\n */\n\nfunction isObject(val) {\n  return typeof val === \"object\";\n}\n/**\n * @hidden\n */\n\nfunction isFunction(val) {\n  return typeof val === \"function\";\n}\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n/**\n * @hidden\n */\n\nfunction findTarget(target) {\n  var el;\n  if (!target) {\n    return null;\n  }\n  if (isString(target)) {\n    el = document.querySelector(target);\n  } else if (target instanceof Element) {\n    el = target;\n  } else if (\"value\" in target || \"current\" in target) {\n    el = target.value || target.current;\n  }\n  return el;\n}\n/**\n * @description Sets the name of the class method to be exposed to the outside.\n * @category DOM\n * @return Property Decorator\n * @example\n * ```ts\n * import { withClassMethods } from \"@cfcs/core\";\n *\n * class YourFrameworkComponent {\n *   @withClassMethod(METHOD_NAMES)\n *   inst = new YourComponent();\n * }\n * ```\n */\n\nfunction withClassMethods(methods) {\n  return function (prototype, memberName) {\n    methods.forEach(function (name) {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var result = (_a = this[memberName])[name].apply(_a, args); // fix `this` type to return your own `class` instance to the instance using the decorator.\n\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nvar OBSERVERS_PATH = \"__observers__\";\nvar COMPUTED_PATH = \"__computed__\";\nvar CFCS_DETECTED_DEPENDENCIES_VERSION = 1;\nvar CFCS_DETECTED_DEPENDENCIES = \"__CFCS_DETECTED_DEPENDENCIES__\";\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nfunction getDetectedStack() {\n  // Version issues do not occur when you access the native object in the global.\n  Object[CFCS_DETECTED_DEPENDENCIES] = Object[CFCS_DETECTED_DEPENDENCIES] || {};\n  var versionList = Object[CFCS_DETECTED_DEPENDENCIES];\n  versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] = versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] || [];\n  return versionList[CFCS_DETECTED_DEPENDENCIES_VERSION];\n}\nfunction getCurrentDetected() {\n  var stack = getDetectedStack();\n  return stack[stack.length - 1];\n}\nfunction detectDependencies(host) {\n  var stack = getDetectedStack();\n  var observers = [];\n  var detected = {\n    host: host,\n    observers: observers,\n    push: function (observer) {\n      if (host !== observer && observers.indexOf(observer) === -1) {\n        observers.push(observer);\n      }\n    }\n  };\n  stack.push(detected);\n  return detected;\n}\nfunction endDetectDependencies() {\n  var stack = getDetectedStack();\n  return stack.pop();\n}\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n/**\n * Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @see observe\n */\n\nvar Observer = /*#__PURE__*/\nfunction () {\n  /**\n   *\n   */\n  function Observer(value) {\n    this._emitter = new Component();\n    this._current = value;\n  }\n  var __proto = Observer.prototype;\n  Object.defineProperty(__proto, \"current\", {\n    /**\n     * return the current value.\n     */\n    get: function () {\n      var currentDetected = getCurrentDetected();\n      currentDetected === null || currentDetected === void 0 ? void 0 : currentDetected.push(this);\n      return this._current;\n    },\n    set: function (value) {\n      this._setCurrent(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * When the current value changes, the callback function is called.\n   */\n\n  __proto.subscribe = function (callback) {\n    this.current;\n    this._emitter.on(\"update\", callback);\n    return this;\n  };\n  /**\n   * Cancel the registered subscription through callback.\n   */\n\n  __proto.unsubscribe = function (callback) {\n    this._emitter.off(\"update\", callback);\n    return this;\n  };\n  __proto._setCurrent = function (value) {\n    var prevValue = this._current;\n    var isUpdate = value !== prevValue;\n    this._current = value;\n    if (isUpdate) {\n      this._emitter.trigger(\"update\", value, prevValue);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n  __proto.toString = function () {\n    return \"\".concat(this.current);\n  };\n  /**\n   * @hidden\n   */\n\n  __proto.valueOf = function () {\n    return this.current;\n  };\n  return Observer;\n}();\n\n/**\n * @category Reactive\n * @hidden\n */\n\nvar ComputedObserver = /*#__PURE__*/\nfunction (_super) {\n  __extends(ComputedObserver, _super);\n  /**\n   * @description Creates a new computed observer from the values of other observers.\n   * It is read-only and if you change the value of the observer used inside the callback, its value will be automatically updated.\n   * @param _computedCallback A function for observers to be computed.\n   */\n\n  function ComputedObserver(_computedCallback) {\n    var _this = _super.call(this) || this;\n    _this._computedCallback = _computedCallback;\n    _this._registered = [];\n    _this._onCheckUpdate = function () {\n      _this._setCurrent(_this.current);\n    };\n    _this._current = _this.current;\n    return _this;\n  }\n  var __proto = ComputedObserver.prototype;\n  Object.defineProperty(__proto, \"current\", {\n    get: function () {\n      var _this = this;\n      detectDependencies(this);\n      var value = this._computedCallback();\n      var results = endDetectDependencies();\n      this._registered.forEach(function (observer) {\n        observer.unsubscribe(_this._onCheckUpdate);\n      });\n      results.observers.forEach(function (observer) {\n        observer.subscribe(_this._onCheckUpdate);\n      });\n      this._registered = results.observers;\n      return value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ComputedObserver;\n}(Observer);\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n\nfunction injectObserve(prototype, memberName, publicName) {\n  if (publicName === void 0) {\n    publicName = memberName;\n  }\n  var nextAttributes = {\n    configurable: true,\n    get: function () {\n      return getObserver(this, publicName).current;\n    },\n    set: function (value) {\n      getObserver(this, publicName, value).current = value;\n    }\n  };\n  Object.defineProperty(prototype, memberName, nextAttributes);\n  if (publicName !== memberName) {\n    Object.defineProperty(prototype, publicName, {\n      configurable: true,\n      get: function () {\n        return getObserver(this, publicName).current;\n      }\n    });\n  }\n}\n/**\n * @description `Observe` is a property decorator and converts the property into a `reactive state`. You can detect its status through `.subscribe`.\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n* ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  // The public name and state name are the same.\n  @Observe value1 = 1;\n  // If you want to set public name and private properties separately\n  @Observe(\"value2\") _value2 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\ninterface C\n```\n */\n\nfunction Observe() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  if (args.length > 1) {\n    return injectObserve(args[0], args[1]);\n  }\n  return function (prototype, memberName) {\n    return injectObserve(prototype, memberName, args[0]);\n  };\n}\n/**\n * @hidden\n */\n\nfunction Reactive() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  return Observe.apply(void 0, args);\n}\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n/**\n * @hidden\n */\n\nfunction injectReactiveSubscribe(object) {\n  object[\"subscribe\"] = function (name, callback) {\n    this[name];\n    getObserver(this, name).subscribe(callback);\n  };\n  object[\"unsubscribe\"] = function (name, callback) {\n    var _this = this;\n    if (!name) {\n      keys(getObservers(this)).forEach(function (observerName) {\n        _this.unsubscribe(observerName);\n      });\n      return;\n    }\n    if (!(name in this)) {\n      return;\n    }\n    getObserver(this, name).unsubscribe(callback);\n  };\n}\n/**\n * @description `ReactiveSubscribe` is a class decorator and adds `.subscribe` and `.unsubscribe` methods.\n * @category Reactive-Decorator\n * @see Observe\n * @example\n * ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  @Observe value1 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\n\ninterface Component extends ReactiveSubscribe<{\n  value1: number;\n  value2: number;\n}> {}\n\nconst component = new Component();\n\n// 1\nconsole.log(component.value1);\n\ncomponent.subscribe(\"value1\", nextValue => {\n  // When the change event occurs => (2, 2)\n  console.log(nextValue, component.value2);\n});\n```\n */\n\nfunction ReactiveSubscribe(Constructor) {\n  var prototype = Constructor.prototype;\n  injectReactiveSubscribe(prototype);\n}\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n\nfunction makeReactiveObject(setup, all) {\n  var result = isFunction(setup) ? setup() : setup;\n  var reactiveObject = {};\n  defineObservers(reactiveObject);\n  keys(result).forEach(function (name) {\n    var value = result[name];\n    if (isObserver(value)) {\n      setObserver(reactiveObject, name, value);\n    } else {\n      setObserver(reactiveObject, name, observe(value));\n    }\n    Observe(name)(reactiveObject, name);\n  });\n  injectReactiveSubscribe(reactiveObject);\n  return reactiveObject;\n}\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Makes all values into reactive objects.\n * @example\n * ```ts\n * import { reactive } from \"@cfcs/core\";\n *\n * const obj = reactive({\n *  value1: 1,\n *  value2: 2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * obj.value1 = 2;\n * ```\n */\n\nfunction reactive(setup) {\n  return makeReactiveObject(setup);\n}\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Only the values to which observer is applied are objects to which reactive is applied.\n * @example\n * ```ts\n * import { partialReactive, observe } from \"@cfcs/core\";\n *\n * const value1 = observe(1);\n * const value2 = observe(2);\n * const obj = partialReactive({\n *  value1,\n *  value2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * value1.current = 2;\n * ```\n */\n\nfunction partialReactive(setup) {\n  return makeReactiveObject(setup);\n}\n/**\n * @description Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @example\n * ```ts\n * import { observe } from \"@cfcs/core\";\n *\n * const ob1 = observe(1);\n *\n * ob1.subscribe(nextValue => {\n *   console.log(nextValue);\n * });\n *\n * ob1.current = 2;\n * ```\n */\n\nfunction observe(defaultValue) {\n  return new Observer(defaultValue);\n}\n/**\n * @hidden\n */\n\nfunction computed(computedCallback) {\n  return new ComputedObserver(computedCallback);\n}\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n/**\n * @hidden\n */\n\nfunction withReactiveMethods(ref, methods) {\n  var obj = {};\n  if (!methods) {\n    return obj;\n  }\n  methods.forEach(function (name) {\n    obj[name] = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var current = ref.current || ref.value;\n      return current[name].apply(current, args);\n    };\n  });\n  return obj;\n}\n/**\n * @hidden\n */\n\nfunction defineObservers(instance) {\n  var observers = {};\n  Object.defineProperty(instance, OBSERVERS_PATH, {\n    get: function () {\n      return observers;\n    }\n  });\n  return observers;\n}\n/**\n * @hidden\n */\n\nfunction getObservers(instance, isComputed) {\n  var _a, _b;\n  if (!instance[OBSERVERS_PATH]) {\n    defineObservers(instance);\n  }\n  var observers = instance[OBSERVERS_PATH];\n  if (!isComputed) {\n    var computedList = (_b = (_a = instance === null || instance === void 0 ? void 0 : instance.constructor) === null || _a === void 0 ? void 0 : _a.prototype) === null || _b === void 0 ? void 0 : _b[COMPUTED_PATH];\n    if (computedList) {\n      computedList.forEach(function (name) {\n        if (!(name in observers) && name in instance) {\n          instance[name];\n        }\n      });\n    }\n  }\n  return observers;\n}\n/**\n * @hidden\n */\n\nfunction getObserver(instance, name, defaultValue) {\n  var observers = getObservers(instance);\n  if (!observers[name]) {\n    observers[name] = observe(defaultValue);\n  }\n  return observers[name];\n}\n/**\n * @hidden\n */\n\nfunction setObserver(instance, name, observer) {\n  var observers = getObservers(instance);\n  observers[name] = observer;\n}\n/**\n * @description Whether that object is an observer instance\n * @category Reactive\n */\n\nfunction isObserver(val) {\n  return val && isObject(val) && \"current\" in val && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n/**\n * @description Whether the object is reactive\n * @category Reactive\n */\n\nfunction isReactive(val) {\n  return val && !isObserver(val) && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n\n/**\n * @category Reactive\n * @hidden\n */\n\nfunction adaptReactive(adapter, props) {\n  var objectAdapter = isFunction(adapter) ? {\n    setup: adapter\n  } : adapter;\n  function getProps() {\n    var _a, _b, _c, _d, _e;\n    return (_e = (_c = (_a = props === null || props === void 0 ? void 0 : props()) !== null && _a !== void 0 ? _a : (_b = objectAdapter.props) === null || _b === void 0 ? void 0 : _b.call(objectAdapter)) !== null && _c !== void 0 ? _c : (_d = objectAdapter.data) === null || _d === void 0 ? void 0 : _d.call(objectAdapter)) !== null && _e !== void 0 ? _e : {};\n  }\n  var eventEmitter = new Component();\n  var mountedHooks = [];\n  var initHooks = [];\n  var destroyHooks = [];\n  var onHooks = [];\n  var instanceRef = {\n    current: null\n  };\n  var offHooksList = [];\n  var initialState = null;\n  var eventNames = [];\n  var methodNames = [];\n  var onMounted = function (callback) {\n    mountedHooks.push(callback);\n  };\n  var onInit = function (callback) {\n    initHooks.push(callback);\n  };\n  var onDestroy = function (callback) {\n    destroyHooks.push(callback);\n  };\n  var on = function (callback) {\n    onHooks.push(callback);\n  };\n  var emit = function (eventName) {\n    var params = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      params[_i - 1] = arguments[_i];\n    }\n    eventEmitter.trigger.apply(eventEmitter, __spreadArray([eventName], params, false));\n  };\n  var setInitialState = function (state) {\n    initialState = state;\n  };\n  var setEvents = function (events) {\n    eventNames = events;\n  };\n  var setMethods = function (methods) {\n    methodNames = methods;\n  };\n  if (objectAdapter.setup) {\n    instanceRef.current = objectAdapter.setup({\n      getProps: getProps,\n      setInitialState: setInitialState,\n      setEvents: setEvents,\n      setMethods: setMethods,\n      onMounted: onMounted,\n      onDestroy: onDestroy,\n      onInit: onInit,\n      emit: emit,\n      on: on\n    }) || null;\n  }\n  if (objectAdapter.created) {\n    instanceRef.current = objectAdapter.created(getProps()) || null;\n  }\n  if (objectAdapter.events) {\n    setEvents(objectAdapter.events);\n  }\n  if (objectAdapter.state) {\n    setInitialState(objectAdapter.state);\n  }\n  if (objectAdapter.methods) {\n    setMethods(objectAdapter.methods);\n  }\n  if (objectAdapter.mounted) {\n    onMounted(objectAdapter.mounted);\n  }\n  if (objectAdapter.destroy) {\n    destroyHooks.push(objectAdapter.destroy);\n  }\n  if (objectAdapter.init) {\n    initHooks.push(objectAdapter.init);\n  }\n  if (objectAdapter.on) {\n    onHooks.push(function (instance, eventName, listener) {\n      var off = objectAdapter.on(instance, eventName, listener);\n      return function () {\n        var _a;\n        off && off();\n        (_a = objectAdapter.off) === null || _a === void 0 ? void 0 : _a.call(objectAdapter, instance, eventName, listener);\n      };\n    });\n  }\n  return {\n    events: function () {\n      return eventNames;\n    },\n    state: function () {\n      var inst = instanceRef.current;\n      if (initialState) {\n        return initialState;\n      }\n      if (inst) {\n        var observers_1 = getObservers(inst);\n        setInitialState(keys(observers_1).reduce(function (prev, cur) {\n          prev[cur] = observers_1[cur].current;\n          return prev;\n        }, {}));\n      }\n      return initialState || {};\n    },\n    instance: function () {\n      return instanceRef.current;\n    },\n    mounted: function () {\n      var props = getProps();\n      mountedHooks.forEach(function (hook) {\n        instanceRef.current = hook(props, instanceRef.current) || instanceRef.current;\n      });\n    },\n    init: function () {\n      // on events\n      var instance = instanceRef.current;\n      var props = getProps();\n      offHooksList = eventNames.map(function (eventName) {\n        var listener = function () {\n          var _a;\n          var params = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n          }\n          (_a = eventEmitter).trigger.apply(_a, __spreadArray([eventName], params, false));\n        };\n        var instance = instanceRef.current;\n        return onHooks.map(function (hook) {\n          return hook(instance, eventName, listener);\n        }).filter(Boolean);\n      }); // init\n\n      initHooks.forEach(function (hook) {\n        hook(instance, props);\n      });\n    },\n    destroy: function () {\n      // off events\n      offHooksList.forEach(function (offHooks) {\n        offHooks.forEach(function (hook) {\n          hook();\n        });\n      }); // destroy\n\n      eventEmitter.off();\n      var instance = instanceRef.current;\n      var props = getProps();\n      destroyHooks.forEach(function (hook) {\n        hook(instance, props);\n      });\n    },\n    methods: function () {\n      return withReactiveMethods(instanceRef, methodNames);\n    },\n    on: function (eventName, listener) {\n      eventEmitter.on(eventName, listener);\n    },\n    off: function (eventName, listener) {\n      eventEmitter.off(eventName, listener);\n    }\n  };\n}\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n/**\n * @description `Computed` is a property decorator.\n * Changes in computed state values are also recognized according to changes in observers used within the getter function.\n * You can detect its status through `.subscribe`.\n * @hidden\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n * ```ts\nconst ob1 = observe(0);\nconst ob2 = observe(1);\n\n// When\n@ReactiveSubscribe\nclass TestComputed {\n  @Computed\n  get ob3() {\n    return ob1.current + ob2.current;\n  }\n}\nconst inst = new TestComputed();\n\ninst.subscribe(\"ob3\", ob3 => {\n  console.log(ob3);\n});\n\nob1.current = 1;\n```\n */\n\nfunction Computed(prototype, memberName, attributes) {\n  var get = attributes.get;\n  function getComputed() {\n    var observers = getObservers(this, true);\n    if (!(memberName in observers)) {\n      observers[memberName] = computed(get.bind(this));\n    }\n    return getObserver(this, memberName).current;\n  }\n  var nextAttributes = {\n    configurable: true,\n    get: getComputed\n  };\n  prototype[COMPUTED_PATH] || (prototype[COMPUTED_PATH] = []);\n  var computedList = prototype[COMPUTED_PATH];\n  if (computedList.indexOf(memberName) === -1) {\n    computedList.push(memberName);\n  }\n  Object.defineProperty(prototype, memberName, nextAttributes);\n  return nextAttributes;\n}\nexport { Computed, ComputedObserver, Observe, Observer, Reactive, ReactiveSubscribe, adaptReactive, camelize, computed, defineObservers, findTarget, getObserver, getObservers, injectReactiveSubscribe, isFunction, isObject, isObserver, isReactive, isString, keys, observe, partialReactive, reactive, setObserver, withClassMethods, withReactiveMethods };\n//# sourceMappingURL=cfcs.esm.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}