{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { EventEmitter } from '@angular/core';\nimport { filter, fromEvent } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ClickOutsideDirective = /*#__PURE__*/(() => {\n  class ClickOutsideDirective {\n    constructor(element, document) {\n      this.element = element;\n      this.document = document;\n      this.clickOutside = new EventEmitter();\n    }\n    ngAfterViewInit() {\n      this.documentClickSubscription = fromEvent(this.document, 'click').pipe(filter(event => {\n        return !this.isInside(event.target);\n      })).subscribe(() => {\n        this.clickOutside.emit();\n      });\n    }\n    ngOnDestroy() {\n      this.documentClickSubscription?.unsubscribe();\n    }\n    isInside(elementToCheck) {\n      return elementToCheck === this.element.nativeElement || this.element.nativeElement.contains(elementToCheck);\n    }\n  }\n  ClickOutsideDirective.ɵfac = function ClickOutsideDirective_Factory(t) {\n    return new (t || ClickOutsideDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n  ClickOutsideDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ClickOutsideDirective,\n    selectors: [[\"\", \"clickOutside\", \"\"]],\n    outputs: {\n      clickOutside: \"clickOutside\"\n    }\n  });\n  return ClickOutsideDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}