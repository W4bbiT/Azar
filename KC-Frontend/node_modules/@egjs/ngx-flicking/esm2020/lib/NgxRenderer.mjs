import { ExternalRenderer, getFlickingAttached } from "@egjs/flicking";
class NgxRenderer extends ExternalRenderer {
    constructor(options) {
        super(options);
        this._ngxFlicking = options.ngxFlicking;
        this._ngxRenderer = options.ngxRenderer;
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async render() {
        const flicking = getFlickingAttached(this._flicking);
        const strategy = this._strategy;
        strategy.updateRenderingPanels(flicking);
        strategy.renderPanels(flicking);
        this._resetPanelElementOrder();
        this._afterRender();
    }
    _collectPanels() {
        const flicking = getFlickingAttached(this._flicking);
        const children = this._ngxFlicking.ngxPanels.toArray();
        this._panels = this._strategy.collectPanels(flicking, children);
    }
    _createPanel(externalComponent, options) {
        return this._strategy.createPanel(externalComponent, options);
    }
    _resetPanelElementOrder() {
        const flicking = getFlickingAttached(this._flicking);
        const renderer = this._ngxRenderer;
        const cameraEl = flicking.camera.element;
        // We're using reversed panels here as last panel should be the last element of camera element
        const reversedElements = this._strategy
            .getRenderingElementsByOrder(flicking)
            .reverse();
        reversedElements.forEach((el, idx) => {
            const nextEl = reversedElements[idx - 1] ? reversedElements[idx - 1] : null;
            if (el.nextElementSibling !== nextEl) {
                renderer.insertBefore(cameraEl, el, nextEl);
            }
        });
    }
}
export default NgxRenderer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmd4UmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZmxpY2tpbmcvc3JjL2xpYi9OZ3hSZW5kZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUdwQixNQUFNLGdCQUFnQixDQUFDO0FBVXhCLE1BQU0sV0FBWSxTQUFRLGdCQUFnQjtJQUt4QyxZQUFtQixPQUEyQjtRQUM1QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFZixJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUM7UUFDeEMsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDO0lBQzFDLENBQUM7SUFFRCw0REFBNEQ7SUFDckQsS0FBSyxDQUFDLE1BQU07UUFDakIsTUFBTSxRQUFRLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFaEMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLFFBQVEsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFUyxjQUFjO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUV2RCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRVMsWUFBWSxDQUFDLGlCQUFtQyxFQUFFLE9BQXFCO1FBQy9FLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVPLHVCQUF1QjtRQUM3QixNQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUV6Qyw4RkFBOEY7UUFDOUYsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUzthQUNwQywyQkFBMkIsQ0FBQyxRQUFRLENBQUM7YUFDckMsT0FBTyxFQUFFLENBQUM7UUFFYixnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDbkMsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUU1RSxJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsS0FBSyxNQUFNLEVBQUU7Z0JBQ3BDLFFBQVEsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUM3QztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsZUFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtcGx1cy1vcGVyYW5kcyAqL1xuaW1wb3J0IHsgUmVuZGVyZXIyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7XG4gIEV4dGVybmFsUmVuZGVyZXIsXG4gIGdldEZsaWNraW5nQXR0YWNoZWQsXG4gIFBhbmVsT3B0aW9ucyxcbiAgUmVuZGVyZXJPcHRpb25zXG59IGZyb20gXCJAZWdqcy9mbGlja2luZ1wiO1xuXG5pbXBvcnQgeyBOZ3hGbGlja2luZ1BhbmVsIH0gZnJvbSBcIi4vbmd4LWZsaWNraW5nLXBhbmVsLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgTmd4RmxpY2tpbmdDb21wb25lbnQgfSBmcm9tIFwiLi9uZ3gtZmxpY2tpbmcuY29tcG9uZW50XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmd4UmVuZGVyZXJPcHRpb25zIGV4dGVuZHMgUmVuZGVyZXJPcHRpb25zIHtcbiAgbmd4RmxpY2tpbmc6IE5neEZsaWNraW5nQ29tcG9uZW50O1xuICBuZ3hSZW5kZXJlcjogUmVuZGVyZXIyO1xufVxuXG5jbGFzcyBOZ3hSZW5kZXJlciBleHRlbmRzIEV4dGVybmFsUmVuZGVyZXIge1xuICAvLyBJbnRlcm5hbCBTdGF0ZXNcbiAgcHJpdmF0ZSBfbmd4RmxpY2tpbmc6IE5neEZsaWNraW5nQ29tcG9uZW50O1xuICBwcml2YXRlIF9uZ3hSZW5kZXJlcjogUmVuZGVyZXIyO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBOZ3hSZW5kZXJlck9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuX25neEZsaWNraW5nID0gb3B0aW9ucy5uZ3hGbGlja2luZztcbiAgICB0aGlzLl9uZ3hSZW5kZXJlciA9IG9wdGlvbnMubmd4UmVuZGVyZXI7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3JlcXVpcmUtYXdhaXRcbiAgcHVibGljIGFzeW5jIHJlbmRlcigpIHtcbiAgICBjb25zdCBmbGlja2luZyA9IGdldEZsaWNraW5nQXR0YWNoZWQodGhpcy5fZmxpY2tpbmcpO1xuICAgIGNvbnN0IHN0cmF0ZWd5ID0gdGhpcy5fc3RyYXRlZ3k7XG5cbiAgICBzdHJhdGVneS51cGRhdGVSZW5kZXJpbmdQYW5lbHMoZmxpY2tpbmcpO1xuICAgIHN0cmF0ZWd5LnJlbmRlclBhbmVscyhmbGlja2luZyk7XG5cbiAgICB0aGlzLl9yZXNldFBhbmVsRWxlbWVudE9yZGVyKCk7XG4gICAgdGhpcy5fYWZ0ZXJSZW5kZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfY29sbGVjdFBhbmVscygpIHtcbiAgICBjb25zdCBmbGlja2luZyA9IGdldEZsaWNraW5nQXR0YWNoZWQodGhpcy5fZmxpY2tpbmcpO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5fbmd4RmxpY2tpbmcubmd4UGFuZWxzLnRvQXJyYXkoKTtcblxuICAgIHRoaXMuX3BhbmVscyA9IHRoaXMuX3N0cmF0ZWd5LmNvbGxlY3RQYW5lbHMoZmxpY2tpbmcsIGNoaWxkcmVuKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfY3JlYXRlUGFuZWwoZXh0ZXJuYWxDb21wb25lbnQ6IE5neEZsaWNraW5nUGFuZWwsIG9wdGlvbnM6IFBhbmVsT3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9zdHJhdGVneS5jcmVhdGVQYW5lbChleHRlcm5hbENvbXBvbmVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBwcml2YXRlIF9yZXNldFBhbmVsRWxlbWVudE9yZGVyKCkge1xuICAgIGNvbnN0IGZsaWNraW5nID0gZ2V0RmxpY2tpbmdBdHRhY2hlZCh0aGlzLl9mbGlja2luZyk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9uZ3hSZW5kZXJlcjtcbiAgICBjb25zdCBjYW1lcmFFbCA9IGZsaWNraW5nLmNhbWVyYS5lbGVtZW50O1xuXG4gICAgLy8gV2UncmUgdXNpbmcgcmV2ZXJzZWQgcGFuZWxzIGhlcmUgYXMgbGFzdCBwYW5lbCBzaG91bGQgYmUgdGhlIGxhc3QgZWxlbWVudCBvZiBjYW1lcmEgZWxlbWVudFxuICAgIGNvbnN0IHJldmVyc2VkRWxlbWVudHMgPSB0aGlzLl9zdHJhdGVneVxuICAgICAgLmdldFJlbmRlcmluZ0VsZW1lbnRzQnlPcmRlcihmbGlja2luZylcbiAgICAgIC5yZXZlcnNlKCk7XG5cbiAgICByZXZlcnNlZEVsZW1lbnRzLmZvckVhY2goKGVsLCBpZHgpID0+IHtcbiAgICAgIGNvbnN0IG5leHRFbCA9IHJldmVyc2VkRWxlbWVudHNbaWR4IC0gMV0gPyByZXZlcnNlZEVsZW1lbnRzW2lkeCAtIDFdIDogbnVsbDtcblxuICAgICAgaWYgKGVsLm5leHRFbGVtZW50U2libGluZyAhPT0gbmV4dEVsKSB7XG4gICAgICAgIHJlbmRlcmVyLmluc2VydEJlZm9yZShjYW1lcmFFbCwgZWwsIG5leHRFbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmd4UmVuZGVyZXI7XG4iXX0=