/*
 * Copyright (c) 2015 NAVER Corp.
 * egjs projects are licensed under the MIT license
 */
import { Directive } from '@angular/core';
import * as i0 from "@angular/core";
export class NgxFlickingPanel {
    get nativeElement() {
        return this._host.nativeElement;
    }
    get rendered() {
        return this._rendered;
    }
    constructor(_host, _renderer) {
        this._host = _host;
        this._renderer = _renderer;
        this._rendered = true;
    }
    show(flicking) {
        this._rendered = true;
        const el = this.nativeElement;
        const cameraEl = flicking.camera.element;
        if (el.parentElement !== cameraEl) {
            this._renderer.appendChild(cameraEl, el);
        }
    }
    hide(flicking) {
        this._rendered = false;
        const el = this.nativeElement;
        const cameraEl = flicking.camera.element;
        if (el.parentElement === cameraEl) {
            this._renderer.removeChild(cameraEl, el);
        }
    }
}
NgxFlickingPanel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NgxFlickingPanel, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
NgxFlickingPanel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: NgxFlickingPanel, isStandalone: true, selector: "[flicking-panel], [FlickingPanel]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NgxFlickingPanel, decorators: [{
            type: Directive,
            args: [{
                    selector: '[flicking-panel], [FlickingPanel]',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZsaWNraW5nLXBhbmVsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1mbGlja2luZy9zcmMvbGliL25neC1mbGlja2luZy1wYW5lbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBeUIsTUFBTSxlQUFlLENBQUM7O0FBT2pFLE1BQU0sT0FBTyxnQkFBZ0I7SUFHM0IsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVELFlBQ1UsS0FBOEIsRUFDOUIsU0FBb0I7UUFEcEIsVUFBSyxHQUFMLEtBQUssQ0FBeUI7UUFDOUIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUU1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDO0lBRU0sSUFBSSxDQUFDLFFBQWtCO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRXRCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDOUIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFFekMsSUFBSSxFQUFFLENBQUMsYUFBYSxLQUFLLFFBQVEsRUFBRTtZQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0lBRU0sSUFBSSxDQUFDLFFBQWtCO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBRXZCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDOUIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFFekMsSUFBSSxFQUFFLENBQUMsYUFBYSxLQUFLLFFBQVEsRUFBRTtZQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDOzs2R0F0Q1UsZ0JBQWdCO2lHQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFKNUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbUNBQW1DO29CQUM3QyxVQUFVLEVBQUUsSUFBSTtpQkFDakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IE5BVkVSIENvcnAuXG4gKiBlZ2pzIHByb2plY3RzIGFyZSBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBGbGlja2luZyBmcm9tICdAZWdqcy9mbGlja2luZyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tmbGlja2luZy1wYW5lbF0sIFtGbGlja2luZ1BhbmVsXScsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIE5neEZsaWNraW5nUGFuZWwge1xuICBwcml2YXRlIF9yZW5kZXJlZDogYm9vbGVhbjtcblxuICBwdWJsaWMgZ2V0IG5hdGl2ZUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hvc3QubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcmVuZGVyZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVkO1xuICB9XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2hvc3Q6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjJcbiAgKSB7XG4gICAgdGhpcy5fcmVuZGVyZWQgPSB0cnVlO1xuICB9XG5cbiAgcHVibGljIHNob3coZmxpY2tpbmc6IEZsaWNraW5nKSB7XG4gICAgdGhpcy5fcmVuZGVyZWQgPSB0cnVlO1xuXG4gICAgY29uc3QgZWwgPSB0aGlzLm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgY2FtZXJhRWwgPSBmbGlja2luZy5jYW1lcmEuZWxlbWVudDtcblxuICAgIGlmIChlbC5wYXJlbnRFbGVtZW50ICE9PSBjYW1lcmFFbCkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuYXBwZW5kQ2hpbGQoY2FtZXJhRWwsIGVsKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaGlkZShmbGlja2luZzogRmxpY2tpbmcpIHtcbiAgICB0aGlzLl9yZW5kZXJlZCA9IGZhbHNlO1xuXG4gICAgY29uc3QgZWwgPSB0aGlzLm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgY2FtZXJhRWwgPSBmbGlja2luZy5jYW1lcmEuZWxlbWVudDtcblxuICAgIGlmIChlbC5wYXJlbnRFbGVtZW50ID09PSBjYW1lcmFFbCkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2hpbGQoY2FtZXJhRWwsIGVsKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==