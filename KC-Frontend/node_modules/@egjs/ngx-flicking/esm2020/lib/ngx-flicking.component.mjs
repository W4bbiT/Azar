/**
 * Copyright (c) 2015 NAVER Corp.
 * egjs projects are licensed under the MIT license
 */
import { Component, Input, Output, EventEmitter, ViewEncapsulation, ContentChildren, HostBinding, Inject, PLATFORM_ID, } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import VanillaFlicking, { sync, getDefaultCameraTransform, VirtualRenderingStrategy, NormalRenderingStrategy, range, CLASS, } from '@egjs/flicking';
import ListDiffer from '@egjs/list-differ';
import { EVENT_NAMES } from './consts';
import FlickingInterface from './FlickingInterface';
import { NgxFlickingPanel } from './ngx-flicking-panel.directive';
import NgxRenderer from './NgxRenderer';
import NgxElementProvider from './NgxElementProvider';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class NgxFlickingComponent extends FlickingInterface {
    get isVertical() {
        return this.options.horizontal === false;
    }
    get isHiddenBeforeInit() {
        const initialized = this._vanillaFlicking && this._vanillaFlicking.initialized;
        return this.hideBeforeInit && !initialized;
    }
    get cameraStyleBeforeInit() {
        const initialized = this._vanillaFlicking && this._vanillaFlicking.initialized;
        return !initialized && this.firstPanelSize
            ? { transform: getDefaultCameraTransform(this.options.align, this.options.horizontal, this.firstPanelSize) }
            : {};
    }
    get ngxPanels() { return this._ngxPanels; }
    // eslint-disable-next-line @typescript-eslint/naming-convention
    get _cameraElClass() { return `flicking-camera ${this.cameraClass ?? ""}`.trim(); }
    constructor(_elRef, _ngxRenderer, _platformId, _ngZone) {
        super();
        this._elRef = _elRef;
        this._ngxRenderer = _ngxRenderer;
        this._platformId = _platformId;
        this._ngZone = _ngZone;
        this.options = {};
        this.plugins = [];
        this.hideBeforeInit = false;
        this._pluginsDiffer = new ListDiffer();
        this._destroy$ = new Subject();
        this._vanillaFlicking = null;
        EVENT_NAMES.forEach(evtName => {
            this[evtName] = new EventEmitter();
        });
    }
    ngAfterViewInit() {
        if (!isPlatformBrowser(this._platformId))
            return;
        const options = this.options;
        const viewportEl = this._elRef.nativeElement;
        const virtual = options.virtual && options.panelsPerView > 0;
        const rendererOptions = {
            ngxFlicking: this,
            align: options.align,
            ngxRenderer: this._ngxRenderer,
            strategy: virtual
                ? new VirtualRenderingStrategy()
                : new NormalRenderingStrategy({
                    providerCtor: NgxElementProvider
                })
        };
        if (virtual) {
            this._initVirtualElements();
        }
        // Initialize `VanillaFlicking` outside of the Angular zone so it will set up `mousedown`
        // and `mousemove` event listeners within the root zone, and it won't trigger change detection
        // every time the user moves the mouse.
        const flicking = this._ngZone.runOutsideAngular(() => new VanillaFlicking(viewportEl, {
            ...this.options,
            externalRenderer: new NgxRenderer(rendererOptions)
        }));
        this._vanillaFlicking = flicking;
        const elementDiffer = new ListDiffer(this._ngxPanels.toArray());
        this._bindEvents();
        this._checkPlugins();
        if (this.status) {
            flicking.setStatus(this.status);
        }
        // Note: doesn't need to unsubscribe, because `changes`
        // gets completed by Angular when the view is destroyed.
        this._ngxPanels.changes.subscribe(() => {
            const panels = this._ngxPanels.toArray();
            const diffResult = elementDiffer.update(panels);
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            sync(flicking, diffResult, [...diffResult.maintained.map(([_, idx]) => diffResult.list[idx]), ...diffResult.added.map(idx => diffResult.list[idx])]);
        });
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._vanillaFlicking?.destroy();
    }
    ngOnChanges() {
        const flicking = this._vanillaFlicking;
        if (!flicking)
            return;
        this._ngZone.runOutsideAngular(() => {
            void flicking.renderer.forceRenderAllPanels();
        });
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { virtual, ...newOptions } = this.options;
        // Omit 'virtual', as it can't have any setter
        for (const key in newOptions) {
            if (key in flicking && flicking[key] !== newOptions[key]) {
                flicking[key] = newOptions[key];
            }
        }
        this._checkPlugins();
    }
    _bindEvents() {
        const flicking = this._vanillaFlicking;
        EVENT_NAMES.forEach(evtName => {
            // `fromEvent` supports passing `JQueryStyleEventEmitter`
            // (an object with `on` and `off` methods). `flicking` acts as a
            // jQuery event emitter since it has both methods.
            fromEvent(flicking, evtName)
                .pipe(takeUntil(this._destroy$))
                .subscribe((e) => {
                // Style guide: Event - https://angular.io/guide/styleguide#dont-prefix-output-properties
                const emitter = this[evtName];
                e.currentTarget = this;
                if (emitter && emitter.observers.length > 0) {
                    this._ngZone.run(() => emitter.emit(e));
                }
            });
        });
    }
    _checkPlugins() {
        const flicking = this._vanillaFlicking;
        if (!flicking)
            return;
        const { list, added, removed, prevList } = this._pluginsDiffer.update(this.plugins);
        flicking.addPlugins(...added.map(index => list[index]));
        flicking.removePlugins(...removed.map(index => prevList[index]));
    }
    _initVirtualElements() {
        const options = this.options;
        const renderer = this._ngxRenderer;
        const cameraElement = this._elRef.nativeElement.firstElementChild;
        const panelsPerView = options.panelsPerView;
        const virtual = options.virtual;
        const fragment = document.createDocumentFragment();
        const newElements = range(panelsPerView + 1).map(idx => {
            const panelEl = renderer.createElement("div");
            panelEl.className = virtual.panelClass ?? CLASS.DEFAULT_VIRTUAL;
            panelEl.dataset.elementIndex = idx.toString();
            return panelEl;
        });
        newElements.forEach(el => {
            fragment.appendChild(el);
        });
        renderer.appendChild(cameraElement, fragment);
    }
}
NgxFlickingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NgxFlickingComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NgxFlickingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: NgxFlickingComponent, isStandalone: true, selector: "ngx-flicking, [NgxFlicking]", inputs: { options: "options", plugins: "plugins", status: "status", cameraClass: "cameraClass", hideBeforeInit: "hideBeforeInit", firstPanelSize: "firstPanelSize" }, outputs: { ready: "ready", beforeResize: "beforeResize", afterResize: "afterResize", holdStart: "holdStart", holdEnd: "holdEnd", moveStart: "moveStart", move: "move", moveEnd: "moveEnd", willChange: "willChange", changed: "changed", willRestore: "willRestore", restored: "restored", select: "select", needPanel: "needPanel", visibleChange: "visibleChange", reachEdge: "reachEdge", panelChange: "panelChange" }, host: { properties: { "class.vertical": "this.isVertical", "class.flicking-hidden": "this.isHiddenBeforeInit" }, styleAttribute: "display: block;", classAttribute: "flicking-viewport" }, queries: [{ propertyName: "_ngxPanels", predicate: NgxFlickingPanel }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `
    <div [ngClass]="_cameraElClass" [ngStyle]="cameraStyleBeforeInit">
      <ng-content></ng-content>
    </div>
    <ng-content select="[in-viewport]"></ng-content>`, isInline: true, styles: [".flicking-viewport{position:relative;overflow:hidden}.flicking-viewport.vertical{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex}.flicking-viewport.vertical>.flicking-camera{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.flicking-viewport.flicking-hidden>.flicking-camera>*{visibility:hidden}.flicking-camera{width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;position:relative;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;z-index:1;will-change:transform}.flicking-camera>*{-ms-flex-negative:0;flex-shrink:0}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NgxFlickingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-flicking, [NgxFlicking]', template: `
    <div [ngClass]="_cameraElClass" [ngStyle]="cameraStyleBeforeInit">
      <ng-content></ng-content>
    </div>
    <ng-content select="[in-viewport]"></ng-content>`, host: {
                        class: 'flicking-viewport',
                        style: 'display: block;',
                    }, encapsulation: ViewEncapsulation.None, standalone: true, imports: [CommonModule], styles: [".flicking-viewport{position:relative;overflow:hidden}.flicking-viewport.vertical{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex}.flicking-viewport.vertical>.flicking-camera{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.flicking-viewport.flicking-hidden>.flicking-camera>*{visibility:hidden}.flicking-camera{width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;position:relative;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;z-index:1;will-change:transform}.flicking-camera>*{-ms-flex-negative:0;flex-shrink:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.NgZone }]; }, propDecorators: { options: [{
                type: Input
            }], plugins: [{
                type: Input
            }], status: [{
                type: Input
            }], cameraClass: [{
                type: Input
            }], hideBeforeInit: [{
                type: Input
            }], firstPanelSize: [{
                type: Input
            }], ready: [{
                type: Output
            }], beforeResize: [{
                type: Output
            }], afterResize: [{
                type: Output
            }], holdStart: [{
                type: Output
            }], holdEnd: [{
                type: Output
            }], moveStart: [{
                type: Output
            }], move: [{
                type: Output
            }], moveEnd: [{
                type: Output
            }], willChange: [{
                type: Output
            }], changed: [{
                type: Output
            }], willRestore: [{
                type: Output
            }], restored: [{
                type: Output
            }], select: [{
                type: Output
            }], needPanel: [{
                type: Output
            }], visibleChange: [{
                type: Output
            }], reachEdge: [{
                type: Output
            }], panelChange: [{
                type: Output
            }], isVertical: [{
                type: HostBinding,
                args: ["class.vertical"]
            }], isHiddenBeforeInit: [{
                type: HostBinding,
                args: ["class.flicking-hidden"]
            }], _ngxPanels: [{
                type: ContentChildren,
                args: [NgxFlickingPanel]
            }] } });
//# sourceMappingURL=data:application/json;base64,